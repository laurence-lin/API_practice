Python framework, 支援async 和sync的API呼叫管理


FastAPI vs. Flask:

FastAPI優點:
  1. 自動產生API測試UI介面
  2. 支援asyns, sync同步功能
  3. 偵測endpoint的data input validation, 避免不合規格的data input
  4. 使用ASGI(asynchronous server gateway interface)溝通，速度較WSGE(web server gateway interface)還要快

Uvicorn:
  FastAPI用Uvicorn framework建立ASGE server.
  執行方式： uvicorn main:app --reload 
          # main: 執行main.py檔
          # app: 在main.py中, 用app = FastAPI()建立的物件
          # reload: 此server可即時更新
  
Async & await:
  Async: 允許非同步，一段程式執行中先讓資源去執行其他程式，回傳結果為Promise
  
  await: 等待，在await中的程式會等待他執行完成 
   Async中使用await代表"執行完此段程式，再繼續執行非同步"
  
  Promise: 接到命令後的回傳物件，有三種類型: 
    pending: 等待事件完成中
    Resolved: 順利完成並回傳結果
    Rejected: 任務失敗並告知原因
    
Parameters for FastAPI:
Path parameters: app.get('/item/{param}')

Query parameters: app.get('/item/')
  async def func(param1: int, param2: str)
  不在path parameter中的即為query parameter.
  
上傳form data:
 File vs. UploadFile: File可指定上傳檔案直接被存為bytes解析, 適用於小檔案. 檔案直接存至memory
 UploadFile: 上傳檔案的上限無限大. 檔案先存到memory, 若memory不夠則自動存到disk. 支援async傳輸, metadata.
 def uploadfile(file_x: bytes = File()):
 
 def uploadfile(file_x: UploadFile = File())
  
  
  
  
  
  
  

  
     



