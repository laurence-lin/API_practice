
Flask Web Server架設筆記與API應用






API接收輸入參數:

註: Flask會將?後面的值全部讀為request.args, 無法再route中輸入多重參數並輸入函數內。故用?格式直接默認輸入參數名再用get()讀取。

以輸入input到model, 並回傳model prediction為例。另input為text, output為result
@app.route(/predict)
def func():
    inputs = request.args.get("text")
    output = model(inputs)
    #須將output轉為json格式才能GET
    output_json = json.dumps({"Prediction":output})
    return output_json
    
呼叫API時:  http://localhost:port/predict?text="這是我輸入的文本資料哈哈哈"
    
    
Flask中另一種接受參數的方法: 再route中用<>輸入參數, 再用function讀取參數
@app.route('/url/param1=<x>)
def function(x)


設定API可接受的HTTP方法: 預設只接受Get方法

可在Route中設定HTTP methods:
@app.route('/url', methods=['GET', 'PORT']) <= 此API接收Get和Post兩種方法





紀錄Server logging:
Flask中使用標準python logging,使用Python內建logging函數即可

Logging用途: Logging紀錄APP運行時發生的每時刻runtime behavior, 及各種event record。這幫助我們回頭檢視APP運行時發生的錯誤和運行狀況。

Python logger包含4種模組: Logger, handler, filter, formatter依功能劃分。
  Logger: 設定logging基本內容, 建立logging instance
  Handler: 設定不同logging存取在不同位置
  Filter: 過濾什麼logging event需要紀錄儲存
  Formatter: 設定logging儲存時的樣子
  
  
使用基本python logging紀錄APP歷程:
  import logging
  loggign.basicConfig(level=<logging的層級>, filename=<Loggingfile儲存位置/file.log>)
  
  
  









