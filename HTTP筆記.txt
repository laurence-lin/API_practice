網頁呈現: Client send a request, server give a response。

Request包含：
 header: 封包標題
 Method: GET, POST, PUT, ...
 URL: request的 URL
 body: 封包本體
 
Response包含：
 header: 封包標題
 status: 回傳狀態
 body: 封包本體



Form data: Client和網頁element溝通時，使用text box、button、check box等HTML form形式傳輸的資訊稱為form data.
  Form data傳送的資訊為key-value pair. 在送出request時，server可直接從form field取得必要資訊.
  GET method中，API輸入query參數即為form data.
  POST method中，message body(request body)即為form data.
  
Request body encoding: 使用POST方法時，若request body有夾帶資訊，則須對其做encoding, 此encoding規定資訊傳到Server後如何解析資料
在POST request中，使用Content-type的request header來定義這裡的編碼方式
HTML有三種encoding方法:
  application/x-www-form-urlencoded: 以form表單傳輸資料
  application/json: 以json傳輸資料
  multipart/form-data: 以binary傳輸資料, 如image, .mp3, file
  text/plain: 以text傳輸資料, 用 "+" 換行
  
建立form data request步驟:
 1. 建立parameter
 2. 建立value(上傳檔案)
 3. 建立body
 4. 建立request


HTTP Method: request發送的不同方式
令request代表送信件, 則head為信封, body為信件內容

GET: request 只有head包含資訊, 所有要送的資訊均在head內, 不允許body傳資料
常用方法: 要傳送的資訊包在query string內
  ex. http://api_url/endpoing?param1 = val1&param2 = val2

POST: request 有head和body, body可夾帶更多資訊, 置入檔案, 傳送成本較高
常用方法: 在URL寫在request head, 並在body內附上所有資訊

Request header: Enable client to send additional information about the request and the client itself.
 Additional message包刮: content type、authorization specification、Network connection等
 傳送訊息最大255character
 常見header field: 
    Connection:
    Content-type:
    Accept:
    
Request body:Client send additional information to server, to allow server fetch the request content more correctly.
 傳送檔案可為XML, JSON等, 大小無上限
 



